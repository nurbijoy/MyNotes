#include <bits/stdc++.h>
using namespace std ;

class edge {
public:
    int source , dest , weight ;
};

bool compare(edge a, edge b) {
    return a.weight < b.weight ;
}

int findParent(int vertices, int *parent) {
    if(parent[vertices] == vertices) return vertices ;
    else return findParent(parent[vertices], parent) ;
}

int kruskal(edge *input, int vertices, int edges) {
    // sort the edges in ascending order
    int cost = 0 ;
    sort(input, input + edges, compare) ;

    edge *output = new edge[vertices-1] ;
    int *parent = new int[vertices] ;
    for(int i = 0 ; i < vertices ; i ++ ) parent[i] = i ;

    int pick = 0 , ptr = 0 ;
    while(pick != vertices-1) {
        edge currentEdge = input[ptr] ;

        // checking if we can take the current edge or not
        int sourceParent = findParent(currentEdge.source, parent) ;
        int destParent = findParent(currentEdge.dest, parent) ;

        if(sourceParent != destParent) {
            output[pick++] = currentEdge ;
            cost += currentEdge.weight ;
            parent[sourceParent] = destParent ;
        }
        ptr ++ ;
    }

    for(int i = 0 ; i < vertices-1 ; i ++ ) {
        cout<<output[i].source<<" "<<output[i].dest<<" "<<output[i].weight<<endl ;
    }
    return cost ;
}
int main() {
    int vertices , edges ;
    cin >> vertices >> edges ;
    edge *input = new edge[edges] ;

    // taking input
    for(int i = 0 ; i < edges ; i ++ ) cin >> input[i].source >> input[i].dest >> input[i].weight ;
    int cost = kruskal(input, vertices, edges) ;
    cout<<"Minimum cost = "<<cost<<endl ;
}

/*
graph input

6 11
0 1 2
1 3 1
0 2 4
2 4 9
4 5 5
3 5 7
4 3 11
2 5 10
0 3 3
2 1 8
2 3 6

*/
